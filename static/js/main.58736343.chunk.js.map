{"version":3,"sources":["components/Item.js","components/ItemList.js","components/IncompleteSection.js","components/CompletedSection.js","components/TaskManager.js","App.js","InMemoryApp.js","index.js"],"names":["Item","props","className","isCompleted","editID","id","onClick","deleteConfirm","onRename","text","type","name","checked","e","stopPropagation","onChange","target","value","onDelete","ItemList","tasks","map","task","newText","IncompleteSection","onConfirm","onQuitEdit","filter","item","length","CompletedSection","hasCompletedItem","showCompletedItems","onDeleteAll","onDeleteConfirm","TaskManager","useState","setEditID","setDeleteConfirm","enteredText","setEnteredText","setNewText","handleRename","handleItemClick","itemID","handleItemDeleted","onTaskFieldChanged","field","console","log","onToggleCompletedItems","placeholder","onAddTask","App","data","handleAddTask","handleTaskFieldChanged","handleDeleteAll","handleToggleCompletedItems","InMemoryApp","initialData","setTasks","setShowCompletedItems","generateUniqueID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58736343.chunk.js","sourcesContent":["import './Item.css'\n\nfunction Item(props) {\n    return (\n        <div className={\n            !props.isCompleted ?\n                props.editID === props.id ? `selectedListItem` : `listItem`\n                :\n                `completeItem`}\n                onClick={() => {\n                    if (props.deleteConfirm) return;\n                    props.onClick(props.id)\n                    props.onRename(props.text)\n                }}>\n\n            {/*checkbox*/}\n            <input type=\"checkbox\" name=\"isCompleted\"\n                   checked={props.isCompleted}\n                   onClick={(e) => e.stopPropagation()}\n                   onChange={() => {\n                       if (props.editID !== false) return\n                       if (props.deleteConfirm) return;\n                       props.onChange(props.id, \"isCompleted\", !props.isCompleted);\n                    }\n                   }\n            />\n\n            {/*Todo text*/}\n            {props.editID === props.id ?\n                <input type=\"text\"\n                       className=\"rename\"\n                       onChange={(e)=> props.onRename(e.target.value)}\n                />\n                :\n                (props.isCompleted === true) ?\n                    <div className={\"task\"}>{props.text}</div>\n                :\n                <input type=\"text\"\n                       className=\"task\"\n                       value={props.text}\n                       onChange={(e)=>props.onRename(e.target.value)}\n                />\n                // <div className=\"item\"> {props.text} </div>\n            }\n\n            {/* Delete button */}\n            <div className=\"buttonGroup\" onClick={(e) => e.stopPropagation()}>\n                <button\n                    className=\"deleteButton\"\n                    onClick={() => {\n                        if (props.editID !== false) return\n                        if (props.deleteConfirm) return;\n                        props.onDelete(props.id)\n                    }}\n                > X\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Item","import Item from \"./Item\";\nimport './ItemList.css'\n\nfunction ItemList(props) {\n    return (\n        props.tasks.map(task =>\n            <Item\n                id = {task.id}\n                key = {task.id}\n                text = {task.text}\n                onRename={props.onRename}\n                newText = {task.newText}\n                isCompleted = {task.isCompleted}\n                editID = {props.editID}\n                deleteConfirm = {props.deleteConfirm}\n                onClick={props.onClick}\n                onDelete = {props.onDelete}\n                onChange = {props.onChange}\n            />)\n    );\n}\n\nexport default ItemList","import ItemList from \"./ItemList\";\nimport './IncompleteSection.css'\n\nfunction IncompleteSection(props) {\n    return (\n        <div className={\"incompleteSection\"}>\n            <div className=\"headerButton\">\n                <h1>To-Do</h1>\n                {props.editID !== false &&\n                    <div>\n                        <button\n                            className=\"confirmButton\"\n                            onClick={()=>props.onConfirm(props.editID, \"text\", props.newText)}\n                        >\n                            Done\n                        </button>\n\n                        <button\n                        onClick={props.onQuitEdit}\n                        >\n                        Cancel\n                        </button>\n                    </div>\n                }\n                </div>\n\n        <div className=\"taskItems\">\n            {props.tasks.filter((item) => item.isCompleted === false).length !== 0 ?\n                <ItemList tasks={props.tasks.filter((item) => item.isCompleted === false)}\n                          editID={props.editID}\n                          newText={props.newText}\n                          onRename={props.onRename}\n                          deleteConfirm={props.deleteConfirm}\n                          onDelete={props.onDelete}\n                          onChange={props.onChange}\n                          onClick={props.onClick}\n                /> :\n                <div className=\"listItem\">\n                    <div className=\"task\">\n                        You don't have any To-Do now\n                    </div>\n                </div>\n            }\n\n        </div>\n    </div>\n    )\n}\nexport default IncompleteSection","import ItemList from \"./ItemList\";\nimport './CompletedSection.css'\n\nfunction CompletedSection(props) {\n    const hasCompletedItem = props.tasks.filter((item) => item.isCompleted === true).length > 0\n\n    return <div className={\"completedSection\"}>\n        {props.showCompletedItems &&\n        <div>\n            <div className=\"headerButton\">\n                <h1>Completed </h1>\n                {(hasCompletedItem) && (\n                    !props.deleteConfirm ?\n                        <button className=\"warning\"\n                                onClick={() => {\n                                    if (props.editID !== false) return\n                                    props.onDeleteConfirm(!props.deleteConfirm)\n                                }}>\n                            Delete All\n                        </button>\n                        :\n                        <div className=\"buttonGroup\">\n                            <button className=\"warning\"\n                                    onClick={() => {\n                                        props.onDeleteAll();\n                                        props.onDeleteConfirm(false)\n                                    }}>\n                                Delete\n                            </button>\n                            <button onClick={()=>props.onDeleteConfirm(false)}>Cancel</button>\n                        </div>)\n                }\n            </div>\n\n            <div className=\"completedTaskItems\">\n                {props.tasks.filter((item) => item.isCompleted === true).length !== 0 ?\n                    <ItemList\n                        className=\"completeItem\"\n                        tasks={props.tasks.filter((item) => item.isCompleted === true)}\n                        editID={props.editID}\n                        newText={props.newText}\n                        onRename={props.onRename}\n                        deleteConfirm={props.deleteConfirm}\n                        onDelete={props.onDelete}\n                        onChange={props.onChange}\n                        onClick={props.onClick}\n                    />\n                    :\n                    <div className=\"completeItem\">\n                        <div className=\"task\">\n                            Completed tasks will appear here\n                        </div>\n                    </div>\n                }\n\n\n            </div>\n        </div>\n        }\n    </div>;\n}\n\nexport default CompletedSection","import IncompleteSection from \"./IncompleteSection\";\nimport CompletedSection from \"./CompletedSection\";\nimport {useState} from \"react\";\nimport './TaskManager.css';\n\nfunction TaskManager(props) {\n    const [editID, setEditID] = useState(false)\n    const [deleteConfirm, setDeleteConfirm] = useState(false)\n    const [enteredText, setEnteredText] = useState('');\n    const [newText, setNewText] = useState(\"\")\n\n    function handleRename(newText) {\n        setNewText(newText)\n    }\n\n    function handleRenameConfirm(editID, field, newText) {\n        props.onTaskFieldChanged(editID, [field], newText)\n        setEditID(false)\n    }\n\n    function handleQuitEdit() {\n        setEditID(false)\n        console.log(editID)\n    }\n\n\n    function handleDeleteConfirm(deleteConfirm){\n        setDeleteConfirm(deleteConfirm)\n    }\n\n    function handleItemClick(itemID) {\n        if (!props.tasks.filter((item) => item.id === itemID)[0].isCompleted)\n            setEditID(itemID)\n    }\n\n    return <div>\n        <title>Task Tracker</title>\n        <div id=\"outlier\">\n            <IncompleteSection\n                tasks={props.tasks}\n                onDelete={props.handleItemDeleted}\n                onChange={props.onTaskFieldChanged}\n                onRename={handleRename}\n                newText={newText}\n                editID={editID}\n                deleteConfirm={deleteConfirm}\n                onClick={handleItemClick}\n                onConfirm={handleRenameConfirm}\n                onQuitEdit={handleQuitEdit}\n            />\n\n            <button id=\"hideButton\"\n                onClick={props.onToggleCompletedItems}>\n                {props.showCompletedItems? `Hide` : `Show`} Completed\n            </button>\n\n\n            <CompletedSection\n                tasks={props.tasks}\n                editID={editID}\n                onRename={handleRename}\n                newText={newText}\n                deleteConfirm={deleteConfirm}\n                showCompletedItems={props.showCompletedItems}\n                onDeleteConfirm={handleDeleteConfirm}\n                onDelete={props.handleItemDeleted}\n                onDeleteAll={props.onDeleteAll}\n                onChange={props.onTaskFieldChanged}\n                onClick={handleItemClick}\n            />\n\n\n            <div className=\"addList\">\n                <input\n                    type=\"text\"\n                    className=\"taskInputBox\"\n                    name=\"task\"\n                    value={enteredText}\n                    onChange={(e)=> setEnteredText(e.target.value)}\n                    placeholder={\n                        editID !== false ? `Please finish edit first`\n                        :\n                        deleteConfirm !== false ?  `Please confirm your deleteAll action`\n                        :\n                        `Enter your new task here`\n                    }\n                />\n                <button type=\"button\"\n                        className=\"addButton\"\n                        onClick={()=> {\n                            if (editID !== false) return\n                            props.onAddTask(enteredText)\n                            setEnteredText(\"\")\n                        }}>+\n                </button>\n            </div>\n\n        </div>\n    </div>\n}\n\nexport default TaskManager","import TaskManager from \"./components/TaskManager\";\n\nfunction App(props) {\n  return (\n     <TaskManager tasks={props.data}\n                  showCompletedItems={props.showCompletedItems}\n                  onAddTask={props.handleAddTask}\n                  onTaskFieldChanged={props.handleTaskFieldChanged}\n                  onDeleteAll={props.handleDeleteAll}\n                  handleItemDeleted={props.handleItemDeleted}\n                  onToggleCompletedItems={props.handleToggleCompletedItems}\n     />\n  );\n}\n\nexport default App;\n","import App from \"./App\";\nimport React, {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nfunction InMemoryApp(props) {\n    const [tasks, setTasks] = useState(props.initialData)\n    const [showCompletedItems, setShowCompletedItems] = useState(true)\n\n    const handleToggleCompletedItems= () => {\n        setShowCompletedItems(!showCompletedItems)\n    }\n\n\n    const handleAddTask = (text) =>{\n        if (text !== \"\"){\n            setTasks([...tasks, {\n                    id: generateUniqueID(),\n                    text: text,\n                    isCompleted: false,\n                }])\n        };\n    }\n\n    function handleTaskFieldChanged(itemID, field, value) {\n        setTasks(tasks.map(\n            task => task.id !== itemID ? task : {...task, [field]: value}))\n    }\n\n    function handleItemDeleted(itemID) {\n        setTasks(tasks.filter((item) => item.id !== itemID));\n    }\n\n    function handleDeleteAll(){\n        setTasks(tasks.filter((item) => !item.isCompleted));\n    }\n\n\n    return <App data={tasks}\n                showCompletedItems={showCompletedItems}\n                handleAddTask={handleAddTask}\n                handleTaskFieldChanged={handleTaskFieldChanged}\n                handleItemDeleted={handleItemDeleted}\n                handleDeleteAll={handleDeleteAll}\n                handleToggleCompletedItems={handleToggleCompletedItems}\n    />\n}\n\nexport default InMemoryApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InMemoryApp from \"./InMemoryApp\";\n\nconst initialData=[\n    {\n        id: 0,\n        text: \"Tap to rename\",\n        isCompleted: false,\n    }\n]\n\nReactDOM.render(\n    <InMemoryApp initialData={initialData}/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}