{"version":3,"sources":["components/Item.js","components/ItemList.js","components/IncompleteSection.js","components/CompletedSection.js","components/TaskManager.js","App.js","index.js"],"names":["Item","props","useState","priority","selectedID","setSelectedID","className","isCompleted","editID","id","onClick","deleteConfirm","onRename","text","type","name","checked","e","stopPropagation","onChange","target","value","onPriority","onDelete","ItemList","tasks","map","task","newPriority","newText","IncompleteSection","onSort","onConfirm","onQuitEdit","filter","item","length","isLoading","CompletedSection","hasCompletedItem","showCompletedItems","onDeleteAll","onDeleteConfirm","TaskManager","setEditID","setDeleteConfirm","enteredText","setEnteredText","setNewPriority","setNewText","handleRename","handleItemClick","itemID","handleItemDeleted","onTaskFieldChanged","onToggleCompletedItems","placeholder","disabled","onKeyDown","key","onAddTask","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","collectionName","App","sortChoice","setSortChoice","setShowCompletedItems","query","collection","orderBy","useCollection","loading","docs","doc","data","generateUniqueID","set","created","database","ServerValue","TIMESTAMP","newSortChoice","field","update","forEach","delete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db34d2bb.chunk.js","sourcesContent":["import './Item.css'\nimport {useState} from \"react\";\n\nfunction Item(props) {\n    const [selectedID, setSelectedID] = useState(props.priority)\n    return (\n        <div className={\n            !props.isCompleted ?\n                props.editID === props.id ? `selectedListItem` : `listItem`\n                :\n                `completeItem`}\n                onClick={() => {\n                    if (props.deleteConfirm) return;\n                    props.onClick(props.id)\n                    props.onRename(props.text)\n                }}>\n\n            {/*checkbox*/}\n            <input type=\"checkbox\" name=\"isCompleted\"\n                   checked={props.isCompleted}\n                   onClick={(e) => e.stopPropagation()}\n                   onChange={() => {\n                       if (props.editID) return\n                       if (props.deleteConfirm) return;\n                       props.onChange(props.id, \"isCompleted\", !props.isCompleted);\n                    }\n                   }\n            />\n\n            {!props.editID && props.priority !== 0 && <div className={\"priorityStatus\"}>\n                {props.priority === 1 ? \"!\" : props.priority === 2 ? \"!!\" : \"!!!\"}\n            </div>}\n\n            {/*Todo text*/}\n            {props.editID === props.id ?\n                <input type=\"text\"\n                       className=\"rename\"\n                       onChange={(e)=> props.onRename(e.target.value)}\n                />\n                :\n                (props.isCompleted) ?\n                    <div className={\"task\"}>{props.text}</div>\n                :\n                <input type=\"text\"\n                       className=\"task\"\n                       value={props.text}\n                       onChange={(e)=>props.onRename(e.target.value)}\n                />\n            }\n\n            {props.editID === props.id &&\n                <div className={\"priorityGroup\"}>\n                    <div className={selectedID === 1 ? \"prioritySelected\" : \"priorityDisplay\" }\n                         onClick={()=> {\n                             selectedID === 1 ? setSelectedID(0) : setSelectedID(1)\n                             props.priority === 1 ? props.onPriority(0) : props.onPriority(1)\n                         }}\n                    >\n                        !\n                    </div>\n\n                    <div className={selectedID === 2 ? \"prioritySelected\" : \"priorityDisplay\"}\n                         onClick={()=> {\n                             selectedID === 2 ? setSelectedID(0) : setSelectedID(2)\n                             props.priority === 2 ? props.onPriority(0) : props.onPriority(2)\n                         }}\n                    >\n                        !!\n                    </div>\n\n                    <div className={selectedID === 3 ? \"prioritySelected\" : \"priorityDisplay\"}\n                         onClick={()=> {\n                             selectedID === 3 ? setSelectedID(0) : setSelectedID(3)\n                             props.priority === 3 ? props.onPriority(0) : props.onPriority(3)\n                             // props.priority === 3 ? props.onChange(props.editID, \"priority\", 0) : props.onChange(props.editID, \"priority\", 3)\n                         }}\n                    >\n                        !!!\n                    </div>\n                </div>\n            }\n\n            {/* Delete button */}\n            { !props.editID && <div className=\"buttonGroup\" onClick={(e) => e.stopPropagation()}>\n                <button\n                    className=\"deleteButton\"\n                    onClick={() => {\n                        if (props.editID) return\n                        if (props.deleteConfirm) return\n                        props.onDelete(props.id)\n                    }}\n                > X\n                </button>\n            </div> }\n        </div>\n    );\n}\n\nexport default Item","import Item from \"./Item\";\nimport './ItemList.css'\n\nfunction ItemList(props) {\n    return (\n        props.tasks.map(task =>\n            <Item\n                id = {task.id}\n                key = {task.id}\n                text = {task.text}\n                priority={task.priority}\n                newPriority={props.newPriority}\n                onRename={props.onRename}\n                onPriority={props.onPriority}\n                newText = {task.newText}\n                isCompleted = {task.isCompleted}\n                editID = {props.editID}\n                deleteConfirm = {props.deleteConfirm}\n                onClick={props.onClick}\n                onDelete = {props.onDelete}\n                onChange = {props.onChange}\n            />)\n    );\n}\n\nexport default ItemList","import ItemList from \"./ItemList\";\nimport './IncompleteSection.css'\n\nfunction IncompleteSection(props) {\n    return (\n        <div className={\"incompleteSection\"}>\n            <div className=\"headerButton\">\n                <h1>To-Do</h1>\n\n                {!props.editID &&\n                    <div>\n                        <select name=\"category\"\n                                id=\"category\"\n                                onChange={(e)=>{\n                                    props.onSort(e.target.value)\n                                }}\n                        >\n                            <option value=\"priority\">\n                                By Priority\n                            </option>\n                            <option value=\"text\">\n                                By Name\n                            </option>\n                            <option value=\"created\">\n                                By Date\n                            </option>\n                        </select>\n                    </div>\n                }\n\n                {props.editID &&\n                    <div>\n                        <button\n                            className=\"confirmButton\"\n                            onClick={()=>{\n                                props.onConfirm(props.editID, props.newText, props.newPriority)\n                            }}\n                        >\n                            Done\n                        </button>\n\n                        <button\n                            onClick={() => {\n                                props.onQuitEdit();\n                            }}\n                        >\n                        Cancel\n                        </button>\n                    </div>\n                }\n                </div>\n\n        <div className=\"taskItems\">\n            {props.tasks.filter((item) => !item.isCompleted).length !== 0 ?\n                <ItemList tasks={props.tasks.filter((item) => !item.isCompleted)}\n                          editID={props.editID}\n                          newText={props.newText}\n                          newPriority={props.newPriority}\n                          onRename={props.onRename}\n                          onPriority={props.onPriority}\n                          deleteConfirm={props.deleteConfirm}\n                          onDelete={props.onDelete}\n                          onChange={props.onChange}\n                          onClick={props.onClick}\n                /> :\n                <div className=\"listItem\">\n                    <div className=\"task\">\n                        {props.isLoading ?\n                            `Loading...` :  `You don't have any To-Do now`}\n                    </div>\n                </div>\n            }\n\n        </div>\n    </div>\n    )\n}\nexport default IncompleteSection","import ItemList from \"./ItemList\";\nimport './CompletedSection.css'\n\nfunction CompletedSection(props) {\n    const hasCompletedItem = props.tasks.filter((item) => item.isCompleted).length > 0\n\n    return <div className={\"completedSection\"}>\n        {props.showCompletedItems &&\n        <div>\n            <div className=\"headerButton\">\n                <h1>Completed </h1>\n                {(hasCompletedItem) && (\n                    !props.deleteConfirm ?\n                        <button className={!props.editID ? \"warning\" : \"disabledWarning\"}\n                                onClick={() => {\n                                    if (props.editID) return\n                                    props.onDeleteConfirm(!props.deleteConfirm)\n                                }}>\n                            Delete All\n                        </button>\n                        :\n                        <div className=\"buttonGroup\">\n                            <button className=\"warning\"\n                                    onClick={() => {\n                                        props.onDeleteAll();\n                                        props.onDeleteConfirm(false)\n                                    }}>\n                                Delete\n                            </button>\n                            <button onClick={()=>props.onDeleteConfirm(false)}>Cancel</button>\n                        </div>)\n                }\n            </div>\n\n            <div className=\"completedTaskItems\">\n                {props.tasks.filter((item) => item.isCompleted).length !== 0 ?\n                    <ItemList\n                        className=\"completeItem\"\n                        tasks={props.tasks.filter((item) => item.isCompleted)}\n                        editID={props.editID}\n                        newText={props.newText}\n                        onRename={props.onRename}\n                        deleteConfirm={props.deleteConfirm}\n                        onDelete={props.onDelete}\n                        onChange={props.onChange}\n                        onClick={props.onClick}\n                    />\n                    :\n                    <div className=\"completeItem\">\n                        <div className=\"task\">\n                            Completed tasks will appear here\n                        </div>\n                    </div>\n                }\n\n\n            </div>\n        </div>\n        }\n    </div>;\n}\n\nexport default CompletedSection","import IncompleteSection from \"./IncompleteSection\";\nimport CompletedSection from \"./CompletedSection\";\nimport {useState} from \"react\";\nimport './TaskManager.css';\n\nfunction TaskManager(props) {\n    const [editID, setEditID] = useState(false)\n    const [deleteConfirm, setDeleteConfirm] = useState(false)\n    const [enteredText, setEnteredText] = useState('');\n    const [newPriority, setNewPriority] = useState('');\n    const [newText, setNewText] = useState(\"\")\n\n    function handleRename(newText) {\n        setNewText(newText)\n    }\n\n    function handlePriority(newPriority){\n        setNewPriority(newPriority)\n    }\n\n    function handleRenameConfirm(editID, newText, newPriority) {\n        props.onTaskFieldChanged(editID, \"text\", newText)\n        props.onTaskFieldChanged(editID, \"priority\", newPriority)\n        setEditID(false)\n    }\n\n    function handleQuitEdit() {\n        setEditID(false)\n    }\n\n\n    function handleDeleteConfirm(deleteConfirm){\n        setDeleteConfirm(deleteConfirm)\n    }\n\n    function handleItemClick(itemID) {\n        if (!props.tasks.filter((item) => item.id === itemID)[0].isCompleted)\n            setEditID(itemID)\n    }\n\n    return <div>\n        <title>Task Tracker</title>\n        <div id=\"outlier\">\n            <IncompleteSection\n                tasks={props.tasks}\n                isLoading={props.isLoading}\n                onDelete={props.handleItemDeleted}\n                onChange={props.onTaskFieldChanged}\n                onSort={props.onSort}\n                onRename={handleRename}\n                onPriority={handlePriority}\n                newText={newText}\n                newPriority={newPriority}\n                editID={editID}\n                deleteConfirm={deleteConfirm}\n                onClick={handleItemClick}\n                onConfirm={handleRenameConfirm}\n                onQuitEdit={handleQuitEdit}\n            />\n\n            <button\n                id=\"hideButton\"\n                className={!editID && !deleteConfirm ? \"hideButton\" : \"disabledHideButton\"}\n                onClick={()=> {\n                    if (editID) return\n                    if (deleteConfirm) return\n                    props.onToggleCompletedItems()}\n                }>\n                {props.showCompletedItems? `Hide` : `Show`} Completed\n            </button>\n\n\n            <CompletedSection\n                tasks={props.tasks}\n                editID={editID}\n                onRename={handleRename}\n                newText={newText}\n                deleteConfirm={deleteConfirm}\n                showCompletedItems={props.showCompletedItems}\n                onDeleteConfirm={handleDeleteConfirm}\n                onDelete={props.handleItemDeleted}\n                onDeleteAll={props.onDeleteAll}\n                onChange={props.onTaskFieldChanged}\n                onClick={handleItemClick}\n            />\n\n\n            <div className=\"addList\">\n                {editID || deleteConfirm ?\n                    <input\n                        type=\"text\"\n                        className=\"taskInputBox\"\n                        name=\"taskDisabled\"\n                        placeholder={editID ? `Please finish edit first` : `Please confirm your deleteAll action`}\n                    disabled>\n                    </input>\n                    :\n                    <input\n                        type=\"text\"\n                        className=\"taskInputBox\"\n                        name=\"task\"\n                        value={enteredText}\n                        onKeyDown={(e) => {\n                            if (e.key === 'Enter') {\n                                props.onAddTask(enteredText)\n                                setEnteredText(\"\")\n                            }\n                        }}\n                        onChange={(e) => setEnteredText(e.target.value)}\n                        placeholder={`Enter your new task here`}\n                    />\n                }\n\n\n                <button type=\"button\"\n                        className={!editID && !deleteConfirm ? \"addButton\" : \"disabledAddButton\"}\n                        onClick={()=> {\n                            if (editID) return\n                            if (deleteConfirm) return\n                            props.onAddTask(enteredText)\n                            setEnteredText(\"\")\n                        }}>+\n                </button>\n            </div>\n\n        </div>\n    </div>\n}\n\nexport default TaskManager","import TaskManager from \"./components/TaskManager\";\nimport firebase from \"firebase/compat\";\nimport React, {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDj8RgS2ttSTayF0nByWTcOJCNchTkxb3Q\",\n    authDomain: \"my-taskmanager-reactapp.firebaseapp.com\",\n    projectId: \"my-taskmanager-reactapp\",\n    storageBucket: \"my-taskmanager-reactapp.appspot.com\",\n    messagingSenderId: \"147010276461\",\n    appId: \"1:147010276461:web:0b3e52192f1579258a0364\",\n    measurementId: \"G-XB9REXV77G\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst collectionName = \"yejiahaoderek-tasks\";\n\n\nfunction App(props) {\n    const [sortChoice , setSortChoice] = useState(\"priority\");\n    const [showCompletedItems, setShowCompletedItems] = useState(true)\n    let tasks = [];\n    let query = db.collection(collectionName)\n\n    query = sortChoice === \"priority\" ?\n        query.orderBy(sortChoice, \"desc\") : query = query.orderBy(sortChoice)\n    const [value, loading, error] = useCollection(query);\n\n    if (value) {\n        tasks = value.docs.map(doc => doc.data())\n    }\n\n    const handleToggleCompletedItems= () => {\n        setShowCompletedItems(!showCompletedItems)\n    }\n\n    function handleSort(newSortChoice) {\n        setSortChoice(newSortChoice)\n    }\n\n    const handleAddTask = (text) =>{\n        if (text !== \"\"){\n            const itemID = generateUniqueID();\n            const docRef = db.collection(collectionName).doc(itemID);\n            docRef.set({\n                id: itemID,\n                text: text,\n                isCompleted: false,\n                priority: 0,\n                created: firebase.database.ServerValue.TIMESTAMP,\n            })\n            // setTasks([...tasks, {\n            //     id: taskID,\n            //     text: text,\n            //     isCompleted: false\n            // }])\n        }\n    }\n\n    function handleTaskFieldChanged(itemID, field, value) {\n        const docRef = db.collection(collectionName).doc(itemID);\n        docRef.update({\n            [field]: value\n        })\n        // setTasks(tasks.map(\n        //     task => task.id !== itemID ? task : {...task, [field]: value}))\n    }\n\n    function handleItemDeleted(itemID) {\n        const docRef = db.collection(collectionName).doc(itemID);\n        docRef.delete(itemID)\n        // setTasks(tasks.filter((item) => item.id !== itemID));\n    }\n\n    function handleDeleteAll(){\n        tasks.forEach(item => {\n            if (item.isCompleted) {\n                const docRef = db.collection(collectionName).doc(item.id);\n                docRef.delete(item.id)\n            }\n        })\n        // setTasks(tasks.filter((item) => !item.isCompleted));\n    }\n\n    return (\n     <TaskManager tasks={tasks}\n                  isLoading={loading}\n                  showCompletedItems={showCompletedItems}\n                  onAddTask={handleAddTask}\n                  onSort = {handleSort}\n                  onTaskFieldChanged={handleTaskFieldChanged}\n                  onDeleteAll={handleDeleteAll}\n                  handleItemDeleted={handleItemDeleted}\n                  onToggleCompletedItems={handleToggleCompletedItems}\n     />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\n\n// const initialData=[\n//     {\n//         id: 0,\n//         text: \"Tap to rename\",\n//         isCompleted: false,\n//         priority: 3,\n//     }\n// ]\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}