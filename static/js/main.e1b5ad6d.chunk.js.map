{"version":3,"sources":["components/Item.js","components/ItemList.js","components/IncompleteSection.js","components/CompletedSection.js","components/TaskManager.js","App.js","InMemoryApp.js","index.js"],"names":["Item","props","className","isCompleted","editID","id","onClick","deleteConfirm","onRename","text","type","name","checked","e","stopPropagation","onChange","value","newText","target","onDelete","ItemList","tasks","map","task","IncompleteSection","onConfirm","filter","item","length","CompletedSection","hasCompletedItem","showCompletedItems","onDeleteAll","onDeleteConfirm","TaskManager","useState","setEditID","setDeleteConfirm","enteredText","setEnteredText","setNewText","handleRename","console","log","handleItemClick","itemID","handleItemDeleted","onTaskFieldChanged","field","onToggleCompletedItems","placeholder","onAddTask","App","data","handleAddTask","handleTaskFieldChanged","handleDeleteAll","handleToggleCompletedItems","InMemoryApp","initialData","setTasks","setShowCompletedItems","generateUniqueID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1b5ad6d.chunk.js","sourcesContent":["function Item(props) {\n    return (\n        <div className={\n            !props.isCompleted ?\n                props.editID === props.id ? `selectedListItem` : `listItem`\n                :\n                `completeItem`}\n                onClick={() => {\n                    if (props.deleteConfirm) return;\n                    props.onClick(props.id)\n                    props.onRename(props.text)\n                }}>\n\n            {/*checkbox*/}\n            <input type=\"checkbox\" name=\"buyBook\"\n                   checked={props.isCompleted}\n                   onClick={(e) => e.stopPropagation()}\n                   onChange={() => {\n                       if (props.editID !== false) return\n                       if (props.deleteConfirm) return;\n                       props.onChange(props.id, \"isCompleted\", !props.isCompleted);\n                    }\n                   }\n            />\n\n            {/*Todo text*/}\n            {props.editID === props.id ?\n                <input type=\"text\"\n                       className=\"rename\"\n                       value={props.newText}\n                       onChange={(e)=> props.onRename(e.target.value)}\n                />\n                :\n                <div className=\"item\"> {props.text} </div>\n            }\n\n            {/* Delete button */}\n            <div className=\"buttonGroup\" onClick={(e) => e.stopPropagation()}>\n                <button\n                    className=\"deleteButton\"\n                    onClick={() => {\n                        if (props.editID !== false) return\n                        if (props.deleteConfirm) return;\n                        props.onDelete(props.id)\n                    }}\n                > X\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Item","import Item from \"./Item\";\n\nfunction ItemList(props) {\n    return (\n        props.tasks.map(task =>\n            <Item\n                id = {task.id}\n                key = {task.id}\n                text = {task.text}\n                onRename={props.onRename}\n                newText = {task.newText}\n                isCompleted = {task.isCompleted}\n                editID = {props.editID}\n                deleteConfirm = {props.deleteConfirm}\n                onClick={props.onClick}\n                onDelete = {props.onDelete}\n                onChange = {props.onChange}\n            />)\n    );\n}\n\nexport default ItemList","import ItemList from \"./ItemList\";\nfunction IncompleteSection(props) {\n    return (\n        <div className={\"incompleteSection\"}>\n            <div className=\"headerButton\">\n                <h1>To-Do</h1>\n                {props.editID !== false &&\n                    <button\n                        className=\"confirmButton\"\n                        onClick={()=>props.onConfirm(props.editID, \"text\", props.newText)}\n                    >\n                        Done\n                    </button>\n                }\n                </div>\n\n        <div className=\"taskItems\">\n            {props.tasks.filter((item) => item.isCompleted === false).length !== 0 ?\n                <ItemList tasks={props.tasks.filter((item) => item.isCompleted === false)}\n                          editID={props.editID}\n                          newText={props.newText}\n                          onRename={props.onRename}\n                          deleteConfirm={props.deleteConfirm}\n                          onDelete={props.onDelete}\n                          onChange={props.onChange}\n                          onClick={props.onClick}\n                /> :\n                <div className=\"listItem\">\n                    <div className=\"item\">\n                        You don't have any To-Do now\n                    </div>\n                </div>\n            }\n\n        </div>\n    </div>\n    )\n}\nexport default IncompleteSection","import ItemList from \"./ItemList\";\n\nfunction CompletedSection(props) {\n    const hasCompletedItem = props.tasks.filter((item) => item.isCompleted === true).length > 0\n\n    return <div className={\"completedSection\"}>\n        {props.showCompletedItems &&\n        <div>\n            <div className=\"headerButton\">\n                <h1>Completed </h1>\n                {(hasCompletedItem) && (\n                    !props.deleteConfirm ?\n                        <button className=\"warning\"\n                                onClick={() => {\n                                    if (props.editID !== false) return\n                                    props.onDeleteConfirm(!props.deleteConfirm)\n                                }}>\n                            Delete All\n                        </button>\n                        :\n                        <div className=\"buttonGroup\">\n                            <button className=\"warning\"\n                                    onClick={() => {\n                                        props.onDeleteAll();\n                                        props.onDeleteConfirm(false)\n                                    }}>\n                                Delete\n                            </button>\n                            <button onClick={()=>props.onDeleteConfirm(false)}>Cancel</button>\n                        </div>)\n                }\n            </div>\n\n            <div className=\"completedTaskItems\">\n                {props.tasks.filter((item) => item.isCompleted === true).length !== 0 ?\n                    <ItemList\n                        className=\"completeItem\"\n                        tasks={props.tasks.filter((item) => item.isCompleted === true)}\n                        editID={props.editID}\n                        newText={props.newText}\n                        onRename={props.onRename}\n                        deleteConfirm={props.deleteConfirm}\n                        onDelete={props.onDelete}\n                        onChange={props.onChange}\n                        onClick={props.onClick}\n                    />\n                    :\n                    <div className=\"completeItem\">\n                        <div className=\"item\">\n                            You don't have any completed tasks\n                        </div>\n                    </div>\n                }\n\n\n            </div>\n        </div>\n        }\n    </div>;\n}\n\nexport default CompletedSection","import IncompleteSection from \"./IncompleteSection\";\nimport CompletedSection from \"./CompletedSection\";\nimport {useState} from \"react\";\n\nfunction TaskManager(props) {\n    const [editID, setEditID] = useState(false)\n    const [deleteConfirm, setDeleteConfirm] = useState(false)\n    const [enteredText, setEnteredText] = useState('');\n    const [newText, setNewText] = useState(\"\")\n    console.log(newText)\n\n    function handleRename(newText) {\n        console.log(\"called\")\n        setNewText(newText)\n    }\n\n    function handleRenameConfirm(editID, field, newText) {\n        props.onTaskFieldChanged(editID, [field], newText)\n        setEditID(false)\n    }\n\n    function handleDeleteConfirm(deleteConfirm){\n        setDeleteConfirm(deleteConfirm)\n    }\n\n    function handleItemClick(itemID) {\n        if (!props.tasks.filter((item) => item.id === itemID)[0].isCompleted)\n            setEditID(itemID)\n    }\n\n    return <div>\n        <title>Task Tracker</title>\n        <div id=\"outlier\">\n            <IncompleteSection\n                tasks={props.tasks}\n                onDelete={props.handleItemDeleted}\n                onChange={props.onTaskFieldChanged}\n                onRename={handleRename}\n                newText={newText}\n                editID={editID}\n                deleteConfirm={deleteConfirm}\n                onClick={handleItemClick}\n                onConfirm={handleRenameConfirm}\n            />\n\n            <button id=\"hideButton\"\n                onClick={props.onToggleCompletedItems}>\n                {props.showCompletedItems? `Hide` : `Show`} Completed\n            </button>\n\n\n            <CompletedSection\n                tasks={props.tasks}\n                editID={editID}\n                onRename={handleRename}\n                newText={newText}\n                deleteConfirm={deleteConfirm}\n                showCompletedItems={props.showCompletedItems}\n                onDeleteConfirm={handleDeleteConfirm}\n                onDelete={props.handleItemDeleted}\n                onDeleteAll={props.onDeleteAll}\n                onChange={props.onTaskFieldChanged}\n                onClick={handleItemClick}\n            />\n\n\n            <div className=\"addList\">\n                <input\n                    type=\"text\"\n                    className=\"taskInputBox\"\n                    name=\"task\"\n                    value={enteredText}\n                    onChange={(e)=> setEnteredText(e.target.value)}\n                    placeholder={\n                        editID !== false ? `Please finish edit first`\n                        :\n                        deleteConfirm !== false ?  `Please confirm your deleteAll action`\n                        :\n                        `Enter your new task here`\n                    }\n                />\n                <button type=\"button\"\n                        className=\"addButton\"\n                        onClick={()=> {\n                            if (editID !== false) return\n                            props.onAddTask(enteredText)\n                            setEnteredText(\"\")\n                        }}>+\n                </button>\n            </div>\n\n        </div>\n    </div>\n}\n\nexport default TaskManager","import './App.css';\nimport './style.css';\nimport TaskManager from \"./components/TaskManager\";\n\n\nfunction App(props) {\n  return (\n     <TaskManager tasks={props.data}\n                  showCompletedItems={props.showCompletedItems}\n                  onAddTask={props.handleAddTask}\n                  onTaskFieldChanged={props.handleTaskFieldChanged}\n                  onDeleteAll={props.handleDeleteAll}\n                  handleItemDeleted={props.handleItemDeleted}\n                  onToggleCompletedItems={props.handleToggleCompletedItems}\n     />\n  );\n}\n\nexport default App;\n","import App from \"./App\";\nimport React, {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nfunction InMemoryApp(props) {\n    const [tasks, setTasks] = useState(props.initialData)\n    const [showCompletedItems, setShowCompletedItems] = useState(true)\n\n    const handleToggleCompletedItems= () => {\n        setShowCompletedItems(!showCompletedItems)\n    }\n\n\n    const handleAddTask = (text) =>{\n        if (text !== \"\"){\n            setTasks([...tasks, {\n                    id: generateUniqueID(),\n                    text: text,\n                    isCompleted: false,\n                }])\n        };\n    }\n\n    function handleTaskFieldChanged(itemID, field, value) {\n        setTasks(tasks.map(\n            task => task.id !== itemID ? task : {...task, [field]: value}))\n    }\n\n    function handleItemDeleted(itemID) {\n        setTasks(tasks.filter((item) => item.id !== itemID));\n    }\n\n    function handleDeleteAll(){\n        setTasks(tasks.filter((item) => !item.isCompleted));\n    }\n\n\n    return <App data={tasks}\n                showCompletedItems={showCompletedItems}\n                handleAddTask={handleAddTask}\n                handleTaskFieldChanged={handleTaskFieldChanged}\n                handleItemDeleted={handleItemDeleted}\n                handleDeleteAll={handleDeleteAll}\n                handleToggleCompletedItems={handleToggleCompletedItems}\n    />\n}\n\nexport default InMemoryApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InMemoryApp from \"./InMemoryApp\";\n\nconst initialData=[\n    {\n        id: 0,\n        text: \"Buy new John Grisham book\",\n        isCompleted: false,\n    },\n    {\n        id: 1,\n        text: \"Eat Lunch\",\n        isCompleted: false,\n    },\n    {\n        id: 2,\n        text: \"Call Mom\",\n        isCompleted: true,\n    },\n]\n\nReactDOM.render(\n    <InMemoryApp initialData={initialData}/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}