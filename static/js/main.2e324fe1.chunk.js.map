{"version":3,"sources":["components/Item.js","components/ItemList.js","components/IncompleteSection.js","components/CompletedSection.js","components/TaskManager.js","App.js","InMemoryApp.js","index.js"],"names":["Item","props","className","isCompleted","editID","id","onClick","deleteConfirm","type","name","checked","e","stopPropagation","onChange","placeholder","text","onRename","onDelete","ItemList","tasks","map","task","isSelected","IncompleteSection","useState","newText","setNewText","onConfirm","filter","item","length","target","value","CompletedSection","hasCompletedItem","showCompletedItems","onDeleteAll","onDeleteConfirm","TaskManager","setEditID","setDeleteConfirm","handleItemClick","itemID","handleItemDeleted","onTaskFieldChanged","field","onToggleCompletedItems","onAddTask","App","data","handleAddTask","handleTaskFieldChanged","handleDeleteAll","handleToggleCompletedItems","InMemoryApp","initialData","setTasks","setShowCompletedItems","generateUniqueID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e324fe1.chunk.js","sourcesContent":["function Item(props) {\n    return (\n        <div className={\n            !props.isCompleted ?\n                props.editID === props.id ? `selectedListItem` : `listItem`\n                :\n                `completeItem`}\n                onClick={() => {\n                    if (props.deleteConfirm) return;\n                    props.onClick(props.id)\n                }}>\n\n            {/*checkbox*/}\n            <input type=\"checkbox\" name=\"buyBook\"\n                   checked={props.isCompleted}\n                   onClick={(e) => e.stopPropagation()}\n                   onChange={() => {\n                       if (props.editID !== false) return\n                       if (props.deleteConfirm) return;\n                       props.onChange(props.id, \"isCompleted\", !props.isCompleted);\n                   }\n                   }\n            />\n\n            {props.editID === props.id ?\n                <input type=\"text\"\n                       className=\"rename\"\n                       placeholder={props.text}\n                       onChange={props.onRename}\n                />\n                :\n                <div className=\"item\"> {props.text} </div>\n            }\n\n            {/* Delete button */}\n            <div className=\"buttonGroup\" onClick={(e) => e.stopPropagation()}>\n                <button\n                    className=\"deleteButton\"\n                    onClick={() => {\n                        if (props.editID !== false) return\n                        if (props.deleteConfirm) return;\n                        props.onDelete(props.id)\n                    }}\n                > X\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Item","import Item from \"./Item\";\n\nfunction ItemList(props) {\n    return (\n        props.tasks.map(task =>\n            <Item\n                id = {task.id}\n                key = {task.id}\n                text = {task.text}\n                isSelected = {task.isSelected}\n                isCompleted = {task.isCompleted}\n                editID = {props.editID}\n                deleteConfirm = {props.deleteConfirm}\n                onClick={props.onClick}\n                onDelete = {props.onDelete}\n                onChange = {props.onChange}\n                onRename = {props.onRename}\n            />)\n    );\n}\n\nexport default ItemList","import ItemList from \"./ItemList\";\nimport {useState} from \"react\";\n\nfunction IncompleteSection(props) {\n    const [newText, setNewText] = useState(\"\")\n\n    function handleRenameText(e){\n        setNewText(e.target.value)\n    }\n\n    return (\n        <div className={\"incompleteSection\"}>\n            <div className=\"headerButton\">\n                <h1>To-Do</h1>\n                {props.editID !== false &&\n                    <button\n                        className=\"confirmButton\"\n                        onClick={()=>props.onConfirm(props.editID, \"text\", newText)}\n                    >\n                        Done\n                    </button>\n                }\n                </div>\n\n        <div className=\"taskItems\">\n            {props.tasks.filter((item) => item.isCompleted === false).length !== 0 ?\n                <ItemList tasks={props.tasks.filter((item) => item.isCompleted === false)}\n                          editID={props.editID}\n                          deleteConfirm={props.deleteConfirm}\n                          onDelete={props.onDelete}\n                          onChange={props.onChange}\n                          onClick={props.onClick}\n                          onRename={handleRenameText}\n                /> :\n                <div className=\"listItem\">\n                    <div className=\"item\">\n                        You don't have any To-Do now\n                    </div>\n                </div>\n            }\n\n        </div>\n    </div>\n    )\n}\nexport default IncompleteSection","import ItemList from \"./ItemList\";\n\nfunction CompletedSection(props) {\n    const hasCompletedItem = props.tasks.filter((item) => item.isCompleted === true).length > 0\n\n    return <div className={\"completedSection\"}>\n        {props.showCompletedItems &&\n        <div>\n            <div className=\"headerButton\">\n                <h1>Completed </h1>\n                {(hasCompletedItem) && (\n                    !props.deleteConfirm ?\n                        <button className=\"warning\"\n                                onClick={() => {\n                                    if (props.editID !== false) return\n                                    props.onDeleteConfirm(!props.deleteConfirm)\n                                }}>\n                            Delete All\n                        </button>\n                        :\n                        <div className=\"buttonGroup\">\n                            <button className=\"warning\"\n                                    onClick={() => {\n                                        props.onDeleteAll();\n                                        props.onDeleteConfirm(false)\n                                    }}>\n                                Delete\n                            </button>\n                            <button onClick={()=>props.onDeleteConfirm(false)}>Cancel</button>\n                        </div>)\n                }\n            </div>\n\n            <div className=\"completedTaskItems\">\n                {props.tasks.filter((item) => item.isCompleted === true).length !== 0 ?\n                    <ItemList\n                        className=\"completeItem\"\n                        tasks={props.tasks.filter((item) => item.isCompleted === true)}\n                        onDelete={props.onDelete}\n                        onChange={props.onChange}\n                        onClick={props.onClick}\n                    />\n                    :\n                    <div className=\"completeItem\">\n                        <div className=\"item\">\n                            You don't have any completed tasks\n                        </div>\n                    </div>\n                }\n\n\n            </div>\n        </div>\n        }\n    </div>;\n}\n\nexport default CompletedSection","import IncompleteSection from \"./IncompleteSection\";\nimport CompletedSection from \"./CompletedSection\";\nimport {useState} from \"react\";\n\nfunction TaskManager(props) {\n    const [editID, setEditID] = useState(false)\n    const [deleteConfirm, setDeleteConfirm] = useState(false)\n    const [text] = useState(\"\")\n\n    function handleRenameConfirm(editID, field, newText) {\n        props.onTaskFieldChanged(editID, [field], newText)\n        setEditID(false)\n    }\n\n    function handleDeleteConfirm(deleteConfirm){\n        setDeleteConfirm(deleteConfirm)\n    }\n\n    function handleItemClick(itemID) {\n        if (!props.tasks.filter((item) => item.id === itemID)[0].isCompleted)\n            setEditID(itemID)\n    }\n\n    return <div>\n        <title>Task Tracker</title>\n        <div id=\"outlier\">\n            <IncompleteSection\n                tasks={props.tasks}\n                onDelete={props.handleItemDeleted}\n                onChange={props.onTaskFieldChanged}\n                editID={editID}\n                deleteConfirm={deleteConfirm}\n                onClick={handleItemClick}\n                onConfirm={handleRenameConfirm}\n            />\n\n            <button id=\"hideButton\"\n                onClick={props.onToggleCompletedItems}>\n                {props.showCompletedItems? `Hide` : `Show`} Completed\n            </button>\n\n\n            <CompletedSection\n                tasks={props.tasks}\n                editID={editID}\n                deleteConfirm={deleteConfirm}\n                showCompletedItems={props.showCompletedItems}\n                onDeleteConfirm={handleDeleteConfirm}\n                onDelete={props.handleItemDeleted}\n                onDeleteAll={props.onDeleteAll}\n                onChange={props.onTaskFieldChanged}\n                onClick={handleItemClick}\n            />\n\n\n            <div className=\"addList\">\n                <input\n                    type=\"text\"\n                    className=\"taskInputBox\"\n                    name=\"task\"\n                    placeholder={\n                        editID !== false ? `Please finish edit first`\n                        :\n                        deleteConfirm !== false ?  `Please confirm your deleteAll action`\n                        :\n                        `Enter your new task here`\n                    }\n                />\n                <button type=\"button\"\n                        className=\"addButton\"\n                        onClick={()=> {\n                            if (editID !== false) return\n                            props.onAddTask(text)\n                        }}>+\n                </button>\n            </div>\n\n        </div>\n    </div>\n}\n\nexport default TaskManager","import './App.css';\nimport './style.css';\nimport TaskManager from \"./components/TaskManager\";\n\n\nfunction App(props) {\n  return (\n     <TaskManager tasks={props.data}\n                  showCompletedItems={props.showCompletedItems}\n                  onAddTask={props.handleAddTask}\n                  onTaskFieldChanged={props.handleTaskFieldChanged}\n                  onDeleteAll={props.handleDeleteAll}\n                  handleItemDeleted={props.handleItemDeleted}\n                  onToggleCompletedItems={props.handleToggleCompletedItems}\n     />\n  );\n}\n\nexport default App;\n","import App from \"./App\";\nimport React, {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nfunction InMemoryApp(props) {\n    const [tasks, setTasks] = useState(props.initialData)\n    const [showCompletedItems, setShowCompletedItems] = useState(true)\n\n    const handleToggleCompletedItems= () => {\n        setShowCompletedItems(!showCompletedItems)\n    }\n\n\n    const handleAddTask = (text) =>{\n        if (text !== \"\"){\n            setTasks([...tasks, {\n                    id: generateUniqueID(),\n                    text: text,\n                    isCompleted: false,\n                }])\n        };\n    }\n\n    function handleTaskFieldChanged(itemID, field, value) {\n        setTasks(tasks.map(\n            task => task.id !== itemID ? task : {...task, [field]: value}))\n    }\n\n    function handleItemDeleted(itemID) {\n        setTasks(tasks.filter((item) => item.id !== itemID));\n    }\n\n    function handleDeleteAll(){\n        setTasks(tasks.filter((item) => !item.isCompleted));\n    }\n\n\n    return <App data={tasks}\n                showCompletedItems={showCompletedItems}\n                handleAddTask={handleAddTask}\n                handleTaskFieldChanged={handleTaskFieldChanged}\n                handleItemDeleted={handleItemDeleted}\n                handleDeleteAll={handleDeleteAll}\n                handleToggleCompletedItems={handleToggleCompletedItems}\n    />\n}\n\nexport default InMemoryApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InMemoryApp from \"./InMemoryApp\";\n\nconst initialData=[\n    {\n        id: 0,\n        text: \"Buy new John Grisham book\",\n        isCompleted: false,\n    },\n    {\n        id: 1,\n        text: \"Eat Lunch\",\n        isCompleted: false,\n    },\n    {\n        id: 2,\n        text: \"Call Mom\",\n        isCompleted: true,\n    },\n]\n\nReactDOM.render(\n    <InMemoryApp initialData={initialData}/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}